// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String     @id @default(cuid())
  squareId   String     @unique
  name       String?
  email      String?    @unique
  projects   Project[]
  locations  Location[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @default(now()) @updatedAt
  services   Service[]
  customers  Customer[] @relation("UserCustomers")
  customerId String?
}

model Customer {
  id                String    @id @default(cuid())
  name              String
  email             String
  phone             String
  validated         Boolean   @default(false)
  mostRecentPin     String?
  mostRecentPinDate DateTime? @default(now())
  notes             String?   @default("")
  address1          String?   @default("")
  address2          String?   @default("")
  city              String?   @default("")
  state             String?   @default("")
  zip               String?   @default("")
  country           String?   @default("US")
  squareId          String?
  artists           User[]    @relation("UserCustomers")
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @default(now()) @updatedAt
  projects          Project[]
  bookings          Booking[]
  payments          Payment[]
}

enum LocationType {
  PHYSICAL
  MOBILE
}

model Location {
  id           String       @id @default(cuid())
  name         String
  nickname     String?      @default("")
  description  String?      @default("")
  email        String?      @default("")
  website      String?      @default("")
  x            String?      @default("")
  instagram    String?      @default("")
  facebook     String?      @default("")
  phone        String?      @default("")
  availability Json?
  type         LocationType @default(PHYSICAL)
  address1     String?      @default("")
  address2     String?      @default("")
  city         String?      @default("")
  state        String?      @default("")
  zip          String?      @default("")
  country      String       @default("US")
  monStart     String?      @default("")
  monEnd       String?      @default("")
  monClosed    Boolean?     @default(false)
  tueStart     String?      @default("")
  tueEnd       String?      @default("")
  tueClosed    Boolean?     @default(false)
  wedStart     String?      @default("")
  wedEnd       String?      @default("")
  wedClosed    Boolean?     @default(false)
  thuStart     String?      @default("")
  thuEnd       String?      @default("")
  thuClosed    Boolean?     @default(false)
  friStart     String?      @default("")
  friEnd       String?      @default("")
  friClosed    Boolean?     @default(false)
  satStart     String?      @default("")
  satEnd       String?      @default("")
  satClosed    Boolean?     @default(false)
  sunStart     String?      @default("")
  sunEnd       String?      @default("")
  sunClosed    Boolean?     @default(false)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @default(now()) @updatedAt
  userId       String
  deleted      Boolean      @default(false)
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  Services     Service[]    @relation("LocationServices")
  Booking      Booking[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Project {
  id         String    @id @default(cuid())
  name       String
  userId     String
  artistId   String
  artist     User      @relation(fields: [artistId], references: [id], onDelete: Cascade)
  customerId String
  customer   Customer  @relation(fields: [customerId], references: [id], onDelete: Cascade)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @default(now()) @updatedAt
  Booking    Booking[]
}

model Booking {
  id         String   @id @default(cuid())
  projectId  String?
  project    Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)
  customerId String
  customer   Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  serviceId  String
  service    Service  @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  locationId String
  location   Location @relation(fields: [locationId], references: [id], onDelete: Cascade)
  start      DateTime @default(now())
  end        DateTime @default(now())
  notes      String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt
}

model Service {
  id                     String     @id @default(cuid())
  name                   String
  description            String?
  price                  Float
  duration               String
  cancellationFee        Float
  userId                 String
  user                   User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  hidePriceFromCustomers Boolean    @default(false)
  bookableByCustomers    Boolean    @default(true)
  locations              Location[] @relation("LocationServices")
  createdAt              DateTime   @default(now())
  updatedAt              DateTime   @default(now()) @updatedAt
  Bookings               Booking[]
}

model Payment {
  id                   String   @id @default(cuid())
  customerId           String
  customer             Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  squareAmount         BigInt
  squareTotalAmount    BigInt
  squareApprovedAmount BigInt
  squareSourceType     String
  squareOrderId        String
  squareId             String
  createdAt            DateTime @default(now())
  updatedAt            DateTime @default(now()) @updatedAt
}
