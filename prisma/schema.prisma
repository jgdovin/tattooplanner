// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Role {
  ARTIST
  CUSTOMER
  ADMIN
}

model User {
  id                 String             @id @default(cuid())
  name               String?
  email              String?            @unique
  emailVerified      DateTime?
  image              String?
  role               Role               @default(CUSTOMER)
  accounts           Account[]
  sessions           Session[]
  projectsAsCustomer Project[]          @relation("ProjectCustomer")
  projectsAsArtist   Project[]          @relation("ProjectArtist")
  artistToCustomers  ArtistToCustomer[] @relation("ArtistOnCustomer")
  customerToArtists  ArtistToCustomer[] @relation("CustomerOnArtist")
}

model ArtistToCustomer {
  id         String @id @default(cuid())
  artistId   String
  customerId String
  artist     User   @relation("ArtistOnCustomer", fields: [artistId], references: [id], onDelete: Cascade)
  customer   User   @relation("CustomerOnArtist", fields: [customerId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Project {
  id        String   @id @default(cuid())
  name      String
  userId    String
  customer  User     @relation("ProjectCustomer", fields: [userId], references: [id], onDelete: Cascade)
  artistId  String
  artist    User     @relation("ProjectArtist", fields: [artistId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
