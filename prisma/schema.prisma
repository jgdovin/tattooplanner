// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["omitApi"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String                  @id @default(cuid())
  clerkId               String                  @unique
  name                  String?
  email                 String?                 @unique
  projects              Project[]
  locations             Location[]
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @default(now()) @updatedAt
  services              Service[]
  customers             Customer[]              @relation("UserCustomers")
  customerId            String?
  emailTemplate         EmailTemplate[]
  surveys               Survey[]
  Assets                Assets[]
  CustomerArtistProfile CustomerArtistProfile[]
}

model Customer {
  id                    String                  @id @default(cuid())
  name                  String
  email                 String
  phone                 String
  isGuest               Boolean                 @default(false)
  validated             Boolean                 @default(false)
  address1              String?
  address2              String?
  city                  String?
  state                 String?
  zip                   String?
  country               String                  @default("US")
  clerkId               String?                 @unique
  artists               User[]                  @relation("UserCustomers")
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @default(now()) @updatedAt
  projects              Project[]
  bookings              Booking[]
  payments              Payment[]
  surveyResponses       SurveyResponse[]
  CustomerArtistProfile CustomerArtistProfile[]
}

model CustomerArtistProfile {
  id             String   @id @default(cuid())
  nickname       String?
  notes          String?
  customerId     String
  alternatePhone String?
  customer       Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  artistId       String
  artist         User     @relation(fields: [artistId], references: [id], onDelete: Cascade)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @default(now()) @updatedAt

  @@unique([customerId, artistId])
}

enum LocationType {
  PHYSICAL
  MOBILE
}

model Location {
  id                       String       @id @default(cuid())
  name                     String
  slug                     String       @unique
  nickname                 String?      @default("")
  description              String?      @default("")
  email                    String?      @default("")
  website                  String?      @default("")
  x                        String?      @default("")
  instagram                String?      @default("")
  facebook                 String?      @default("")
  phone                    String?      @default("")
  availability             Json?
  type                     LocationType @default(PHYSICAL)
  address1                 String       @default("")
  address2                 String       @default("")
  city                     String       @default("")
  state                    String       @default("")
  zip                      String       @default("")
  country                  String       @default("US")
  monStart                 String?      @default("")
  monEnd                   String?      @default("")
  monClosed                Boolean      @default(false)
  tueStart                 String?      @default("")
  tueEnd                   String?      @default("")
  tueClosed                Boolean      @default(false)
  wedStart                 String?      @default("")
  wedEnd                   String?      @default("")
  wedClosed                Boolean      @default(false)
  thuStart                 String?      @default("")
  thuEnd                   String?      @default("")
  thuClosed                Boolean      @default(false)
  friStart                 String?      @default("")
  friEnd                   String?      @default("")
  friClosed                Boolean      @default(false)
  satStart                 String?      @default("")
  satEnd                   String?      @default("")
  satClosed                Boolean      @default(false)
  sunStart                 String?      @default("")
  sunEnd                   String?      @default("")
  sunClosed                Boolean      @default(false)
  createdAt                DateTime     @default(now())
  updatedAt                DateTime     @default(now()) @updatedAt
  userId                   String
  deleted                  Boolean      @default(false)
  requiresSurveyForBooking Boolean      @default(false)
  surveyId                 String?
  survey                   Survey?      @relation(fields: [surveyId], references: [id])
  user                     User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  services                 Service[]    @relation("LocationServices")
  bookings                 Booking[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Project {
  id         String    @id @default(cuid())
  name       String
  artistId   String
  artist     User      @relation(fields: [artistId], references: [id], onDelete: Cascade)
  customerId String?
  customer   Customer? @relation(fields: [customerId], references: [id], onDelete: SetNull)
  notes      String?
  Assets     Assets[]
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @default(now()) @updatedAt
}

model Assets {
  id        String   @id @default(cuid())
  url       String
  type      String
  artistId  String
  s3Key     String
  artist    User     @relation(fields: [artistId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  Project   Project? @relation(fields: [projectId], references: [id])
  projectId String?
}

model Booking {
  id         String   @id @default(cuid())
  customerId String
  customer   Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  serviceId  String
  service    Service  @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  locationId String
  location   Location @relation(fields: [locationId], references: [id], onDelete: Cascade)
  start      DateTime @default(now())
  end        DateTime @default(now())
  notes      String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt
}

model Service {
  id                     String     @id @default(cuid())
  name                   String
  description            String?
  price                  Float
  duration               String
  cancellationFee        Float
  userId                 String
  user                   User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  hidePriceFromCustomers Boolean    @default(false)
  bookableByCustomers    Boolean    @default(true)
  deleted                Boolean    @default(false)
  locations              Location[] @relation("LocationServices")
  createdAt              DateTime   @default(now())
  updatedAt              DateTime   @default(now()) @updatedAt
  bookings               Booking[]
}

model Payment {
  id                   String   @id @default(cuid())
  customerId           String
  customer             Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  squareAmount         BigInt
  squareTotalAmount    BigInt
  squareApprovedAmount BigInt
  squareSourceType     String
  squareOrderId        String
  squareId             String
  createdAt            DateTime @default(now())
  updatedAt            DateTime @default(now()) @updatedAt
}

model EmailTemplate {
  id        String   @id @default(cuid())
  name      String
  subject   String
  body      String
  global    Boolean  @default(false)
  userId    String
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  deleted   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model SurveyResponse {
  id         String   @id @default(cuid())
  surveyId   String
  survey     Survey   @relation(fields: [surveyId], references: [id], onDelete: Cascade)
  customerId String
  customer   Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  response   Json
  deleted    Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt
}

model Survey {
  id        String           @id @default(cuid())
  name      String
  json      Json             @default("{}")
  userId    String
  user      User?            @relation(fields: [userId], references: [id], onDelete: Cascade)
  responses SurveyResponse[]
  deleted   Boolean          @default(false)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @default(now()) @updatedAt
  locations Location[]
}
